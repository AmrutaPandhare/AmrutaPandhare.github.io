<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator><link href="https://amrutapandhare.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://amrutapandhare.github.io/" rel="alternate" type="text/html" hreflang="en" /><updated>2024-05-28T19:18:59+00:00</updated><id>https://amrutapandhare.github.io/feed.xml</id><title type="html">blank</title><subtitle>A simple, whitespace theme for academics. Based on [*folio](https://github.com/bogoli/-folio) design.
</subtitle><entry><title type="html">Tenable</title><link href="https://amrutapandhare.github.io/blog/2023/tenableAPI/" rel="alternate" type="text/html" title="Tenable" /><published>2023-04-01T22:01:00+00:00</published><updated>2023-04-01T22:01:00+00:00</updated><id>https://amrutapandhare.github.io/blog/2023/tenableAPI</id><content type="html" xml:base="https://amrutapandhare.github.io/blog/2023/tenableAPI/"><![CDATA[<h2 id="about">About</h2>

<p>Managing Tenable scans programmatically can save time and effort, especially when dealing with multiple scans. This blog will guide you through a Python script that leverages the Tenable API to download specific scans, save them in CSV format, and convert the CSV files to JSON. We’ll explain each part of the script so you can understand and modify it as needed.</p>

<hr />
<h2 id="overview">Overview</h2>

<p>Before diving into the code, let’s outline the main steps the script performs:</p>

<p><strong>Configure logging and set API keys</strong>: Initialize logging and define your Tenable API keys.</p>

<p><strong>Fetch scan data</strong>: Retrieve the list of scans from Tenable.io.</p>

<p><strong>Download scans</strong>: Export the scans in CSV format.</p>

<p><strong>Save and process scans</strong>: Save the CSV files and convert them to JSON format.</p>

<hr />
<h2 id="script">Script</h2>

<p>Here’s the full script with comments explaining each part:</p>

<p><strong>Import Libraries</strong></p>

<p>python
Copy code
import requests
import json
import csv
import sys
import time
import pandas as pd
import logging
import re</p>

<p><strong>Configure logging</strong></p>

<p>logging.basicConfig(filename=’log.txt’, level=logging.INFO, format=’%(asctime)s:%(levelname)s:%(message)s’)</p>

<p><strong>Set Tenable API keys &amp; declare list of scans</strong></p>

<p>ACCESS_KEY = ‘YOUR_ACCESS_KEY’
SECRET_KEY = ‘YOUR_SECRET_KEY’
scan_search_list = [‘scan1’, ‘scan2’, ‘scan3’]</p>

<p><strong>Set the base URL and headers for the Tenable API &amp; fetch scans</strong></p>

<p>url = ‘https://cloud.tenable.com’
headers = {‘X-ApiKeys’: f’accessKey={ACCESS_KEY}; secretKey={SECRET_KEY};’}</p>

<p>for scan_search in scan_search_list:
    logging.info(f”Processing scan search: {scan_search}”)</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>scans = requests.get(f'{url}/scans', headers=headers).json()['scans']
for scan in scans:
    if scan_search.lower() in scan['name'].lower() and not scan['name'].endswith('_OLD'):
        scan_id = scan['id']
        scan_name = scan['name']
        uuid = scan.get("uuid", scan.get("wizard_uuid", ""))  # UUID or WIZARD_UUID
        logging.info(f'Found: {scan_name} ({scan_id})')
</code></pre></div></div>

<p><strong>Request download</strong></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>        export_request = {
            'chapters': 'vuln_hosts_summary,vuln_by_host,compliance_exec,remediations,vuln_by_plugin,compliance',
            'filter.search_type': 'and',
            'format': 'csv'
        }
        file_request = requests.post(f'{url}/scans/{scan_id}/export', headers=headers, json=export_request)
        if file_request.status_code != 200 or 'error' in file_request.json():
            logging.error(f'Request failed for {scan_name}: {file_request.text}')
            continue  # Skip to the next scan

        file_id = file_request.json()['file']
</code></pre></div></div>

<p><strong>Monitor until not loading</strong></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>        status = 'loading'
        while status == 'loading':
            time.sleep(1)
            file_status = requests.get(f'{url}/scans/{scan_id}/export/{file_id}/status', headers=headers).json()
            status = file_status['status']
            logging.info(f'Checking status for {scan_name}: {status}')
</code></pre></div></div>

<p><strong>Download if ready</strong></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>        if status == 'ready':
            file_download = requests.get(f'{url}/scans/{scan_id}/export/{file_id}/download', headers=headers)
            filename = f'{scan_name.replace(" ", "_")}.csv'
            with open(filename, 'wb') as fout:
                fout.write(file_download.content)
            logging.info(f'Wrote: {filename}')
</code></pre></div></div>

<p><strong>Convert CSV to JSON</strong></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>            selected_columns = ['Host Start', 'Risk', 'CVE', 'Host', 'Name', 'Solution']
            df = pd.read_csv(filename, usecols=selected_columns)
            df.rename(columns={'Host Start': 'scanStartDate', 'Risk': 'risk', 'CVE': 'cve', 'Host': 'host', 'Name': 'name', 'Solution': 'solution'}, inplace=True)
            
            record_date = df['scanStartDate'].iloc[0][:10]
            
            scan_entries = []
            for _, row in df.iterrows():
                entry = {
                    'scanStartDate': 'None' if pd.isna(row['scanStartDate']) else row['scanStartDate'],
                    'risk': 'None' if pd.isna(row['risk']) else row['risk'],
                    'cve': 'None' if pd.isna(row['cve']) else row['cve'],
                    'host': 'None' if pd.isna(row['host']) else row['host'],
                    'name': 'None' if pd.isna(row['name']) else row['name'],
                    'solution': 'None' if pd.isna(row['solution']) else row['solution']
                }
                scan_entries.append(entry)
            
            additional_info = {"recordDate": record_date, "scanEntries": scan_entries}
            final_json_data = json.dumps(additional_info) + '\n'

            json_filename = f'{scan_name}-{record_date}.json'
            with open(json_filename, 'w') as json_file:
                json_file.write(final_json_data)
            logging.info(f'Appended information to JSON: {json_filename}')
        else:
            logging.error(f'Issue with file for {scan_name}: {status}')
</code></pre></div></div>

<p>print(“Script execution completed.”)</p>

<hr />
<h2 id="additional-use-cases">Additional Use Cases</h2>

<p><strong>Automated Report Generation</strong>
Scheduled execution of the script to regularly download and process scans, generating periodic reports.
Email notifications to send generated reports or alerts based on scan results.</p>

<p><strong>Integration with SIEM Systems</strong>
Send JSON data to a Security Information and Event Management (SIEM) system for further analysis and correlation.
Webhook integration to trigger real-time actions based on scan results.</p>

<p><strong>Visualization and Dashboarding</strong>
Data visualization tools like Matplotlib or Seaborn to create visual reports from the scan data.
Integration with BI tools like Tableau or Power BI to create interactive dashboards.</p>

<p><strong>Advanced Filtering and Analysis</strong>
Custom filters to extract specific vulnerabilities or assets based on certain criteria.
Trend analysis to monitor vulnerability trends over time.</p>

<hr />
<h2 id="conclusion">Conclusion</h2>

<p>This script automates the process of downloading and processing Tenable scan data, making it easier to manage and analyze scan results. By following the detailed steps above, you can adapt the script to fit your specific needs and integrate it into your workflow. Happy coding!</p>]]></content><author><name>Amruta Pandhare</name></author><summary type="html"><![CDATA[Automating Tenable Scan Downloads and Conversions to CSV and JSON with Python]]></summary></entry><entry><title type="html">Opsgenie</title><link href="https://amrutapandhare.github.io/blog/2023/opsgenie/" rel="alternate" type="text/html" title="Opsgenie" /><published>2023-04-01T21:01:00+00:00</published><updated>2023-04-01T21:01:00+00:00</updated><id>https://amrutapandhare.github.io/blog/2023/opsgenie</id><content type="html" xml:base="https://amrutapandhare.github.io/blog/2023/opsgenie/"><![CDATA[<h2 id="overview">Overview</h2>

<div class="row mt-3">
    <div class="col-sm mt-3 mt-md-0">
        <figure>

  <picture>
    
    <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/opsgenielogo-480.webp" />
    <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/opsgenielogo-800.webp" />
    <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/opsgenielogo-1400.webp" />
    

    <!-- Fallback to the original file -->
    <img src="/assets/opsgenielogo.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();" />

  </picture>

</figure>

    </div>
</div>

<p>Opsgenie is a modern incident management tool that helps organizations to quickly detect, diagnose, and resolve incidents. It is designed to provide a centralized platform that allows teams to collaborate effectively, streamline their incident response processes, and reduce downtime.</p>

<p>Opsgenie was acquired by Atlassian in 2018 and is now part of the Atlassian family of products. This acquisition has strengthened Atlassian’s offering in the IT service management space and has made Opsgenie one of the leading incident management tools on the market.</p>

<p>In this blog post, I will provide an in-depth examination of Opsgenie, exploring its uses, features, advantages, and disadvantages.</p>

<hr />
<h2 id="about">About</h2>

<p>Opsgenie is a cloud-based incident management platform that helps teams respond to alerts and incidents quickly and efficiently. It offers a wide range of features such as alerting, on-call scheduling, incident management, and collaboration tools.</p>

<p>Opsgenie works by receiving alerts from various sources such as monitoring tools, cloud services, and other applications. These alerts can be customized based on severity, priority, and other criteria. Once an alert is received, Opsgenie can notify the appropriate team members via various communication channels such as email, SMS, voice call, or mobile push notification.</p>

<p>It also offers on-call scheduling, which helps teams manage their on-call rotations and ensure that the right person is notified in case of an incident. Additionally, it provides incident management capabilities such as incident response workflows, collaboration tools, and reporting and analytics.</p>

<p>Overall, Opsgenie streamlines the incident management process and helps teams resolve incidents quickly and efficiently, improving overall uptime and reducing the impact of downtime on business operations.</p>

<hr />
<h2 id="features">Features</h2>

<p>Opsgenie has a wide range of features that make it a powerful incident management tool. Here are some of the most notable features:</p>

<p><strong>Alert Management</strong>: Opsgenie provides a centralized platform for managing alerts from different sources, such as monitoring tools, cloud providers, and other third-party applications. It allows teams to customize their alert routing rules, prioritize alerts based on their severity, and set up escalation policies to ensure that alerts are responded to in a timely manner.</p>

<p><strong>Incident Management</strong>: Opsgenie provides a streamlined incident management workflow that allows teams to quickly detect, diagnose, and resolve incidents. It provides a centralized platform for collaboration, communication, and coordination, and allows teams to track the status of incidents in real-time.</p>

<p><strong>Automation</strong>: Opsgenie allows teams to automate their incident response processes using integrations and APIs. This allows teams to reduce manual effort, improve the speed and accuracy of their incident response, and ensure that incidents are resolved quickly.</p>

<p><strong>Reporting and Analytics</strong>: Opsgenie provides a range of reporting and analytics features that allow teams to measure the effectiveness of their incident management processes. Teams can track metrics such as mean time to acknowledge (MTTA), mean time to resolution (MTTR), incident frequency, and incident resolution time, and use this data to continuously improve their incident response processes.</p>

<div class="row mt-3">
    <div class="col-sm mt-3 mt-md-0">
        <figure>

  <picture>
    
    <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/dashboard2-480.webp" />
    <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/dashboard2-800.webp" />
    <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/dashboard2-1400.webp" />
    

    <!-- Fallback to the original file -->
    <img src="/assets/img/dashboard2.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();" />

  </picture>

</figure>

    </div>
    <div class="col-sm mt-3 mt-md-0">
        <figure>

  <picture>
    
    <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/dashboard-480.webp" />
    <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/dashboard-800.webp" />
    <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/dashboard-1400.webp" />
    

    <!-- Fallback to the original file -->
    <img src="/assets/img/dashboard.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();" />

  </picture>

</figure>

    </div>
</div>

<p><strong>Mobile App</strong>: Opsgenie provides a mobile app that allows teams to manage incidents, alerts, and outages from anywhere. The mobile app provides real-time push notifications, allows teams to collaborate and communicate on-the-go, and ensures that teams can respond to incidents quickly, even when they are away from their desks.</p>

<div class="row mt-3">
    <div class="col-sm mt-3 mt-md-0">
        <figure>

  <picture>
    
    <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/dashboard3-480.webp" />
    <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/dashboard3-800.webp" />
    <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/dashboard3-1400.webp" />
    

    <!-- Fallback to the original file -->
    <img src="/assets/img/dashboard3.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();" />

  </picture>

</figure>

    </div>
</div>

<hr />
<h2 id="use-cases">Use Cases</h2>

<p>Opsgenie can be used in a variety of use cases, some of which are:</p>

<p><strong>IT Infrastructure Monitoring</strong>: Opsgenie can receive alerts from various monitoring tools and help teams respond to incidents quickly. It can also provide real-time dashboards and reports for better visibility into the health of the IT infrastructure.</p>

<p><strong>DevOps</strong>: Opsgenie can be used to manage incidents in DevOps workflows, helping teams detect and resolve issues early in the development cycle. It can also integrate with various DevOps tools to automate incident management and streamline workflows.</p>

<p><strong>Cloud Services Monitoring</strong>: Opsgenie can monitor cloud services such as AWS, Azure, and Google Cloud, and notify the appropriate team members in case of an incident. It can also provide real-time dashboards and reports for better visibility into the health of the cloud environment.</p>

<p><strong>Security</strong>: Opsgenie can be used to manage security incidents such as data breaches, network intrusions, and malware attacks. It can help teams respond to incidents quickly and efficiently, reducing the impact of security breaches.</p>

<p><strong>Business Continuity</strong>: Opsgenie can be used to ensure business continuity by monitoring critical systems and applications and alerting the appropriate team members in case of an incident. It can also provide real-time dashboards and reports for better visibility into the health of the business operations.</p>

<hr />
<h2 id="pros-cons">Pros-Cons</h2>

<table>
  <thead>
    <tr>
      <th>Pros</th>
      <th style="text-align: center">Cons</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><strong>Powerful Incident Management Capabilities</strong>: Opsgenie offers robust incident management capabilities, including real-time alerting, on-call scheduling, incident response workflows, and collaboration tools, which can help teams respond to incidents quickly and efficiently.</td>
      <td style="text-align: center"><strong>Complexity</strong>: Opsgenie can be complex to set up and configure, requiring significant expertise and effort to customize and integrate with third-party tools.</td>
    </tr>
    <tr>
      <td><strong>Integration with Third-Party Tools</strong>: Opsgenie integrates with a wide range of third-party tools such as monitoring tools, DevOps tools, and cloud services, enabling teams to automate incident management and streamline workflows.</td>
      <td style="text-align: center"><strong>Cost</strong>: Opsgenie can be expensive, especially for small and medium-sized businesses, with pricing based on the number of users and the level of functionality required.</td>
    </tr>
    <tr>
      <td><strong>Customization and Flexibility</strong>: Opsgenie offers extensive customization options, allowing teams to tailor their incident management processes to their specific needs. It also offers flexibility in terms of deployment options, including cloud-based, on-premises, and hybrid deployments.</td>
      <td style="text-align: center"><strong>Learning Curve</strong>: Opsgenie has a steep learning curve, requiring training and onboarding for new users to become proficient in using the platform.</td>
    </tr>
    <tr>
      <td><strong>Advanced Reporting and Analytics</strong>: Opsgenie provides advanced reporting and analytics capabilities, including real-time dashboards, incident reports, and trend analysis, enabling teams to gain insights into their incident management processes and make data-driven decisions.</td>
      <td style="text-align: center"><strong>Reliance on Third-Party Integrations</strong>: Opsgenie relies heavily on integrations with third-party tools, and issues with these integrations can cause problems with incident management workflows.</td>
    </tr>
  </tbody>
</table>

<hr />
<h2 id="conclusion">Conclusion</h2>

<p>Opsgenie is a powerful incident management tool that is used by organizations of all sizes and industries. Its use cases span IT operations, DevOps, security operations, and business operations, and its features include alert management, incident management, automation, reporting and analytics, and a mobile app. If you’re looking to improve your incident response processes, Opsgenie is definitely worth considering.</p>

<hr />
<h2 id="references">References</h2>

<ol>
  <li><a href="https://support.atlassian.com/opsgenie/resources/">https://support.atlassian.com/opsgenie/resources/</a></li>
  <li><a href="https://blog.deiser.com/en/what-is-opsgenie-used-for">https://blog.deiser.com/en/what-is-opsgenie-used-for</a></li>
</ol>]]></content><author><name>Amruta Pandhare</name></author><summary type="html"><![CDATA[A Comprehensive Incident Management Tool for Streamlined Operations]]></summary></entry></feed>